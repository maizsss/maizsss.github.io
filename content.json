{"meta":{"title":"maizsss blog","subtitle":null,"description":null,"author":"maizsss","url":"http://maizsss.github.io"},"pages":[{"title":"categories","date":"2017-10-28T07:46:47.000Z","updated":"2017-10-28T07:46:47.150Z","comments":true,"path":"categories/index.html","permalink":"http://maizsss.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-10-28T07:46:22.000Z","updated":"2017-10-28T07:46:22.284Z","comments":true,"path":"tags/index.html","permalink":"http://maizsss.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"vue项目的错误捕获方式","slug":"vue项目的错误捕获方式","date":"2017-11-01T04:16:28.000Z","updated":"2017-11-01T04:17:20.394Z","comments":true,"path":"2017/11/01/vue项目的错误捕获方式/","link":"","permalink":"http://maizsss.github.io/2017/11/01/vue项目的错误捕获方式/","excerpt":"","text":"为什么要捕获错误？ 为什么要花那么多的时间成本和精力去做什么捕获错误的事情？为什么要提高代码质量？为什么要让项目更健壮？这个问题我也不懂回答，不过这就好比”有得吃就行了，为什么要吃好，为什么要花大钱去吃什么米其林三星。” 目前为止我接触到的需要捕获错误的地方或目的有2： 做错误兼容，如： 1234var obj = &#123;&#125;;try &#123; obj = JSON.parse(json);&#125; catch(e) &#123;&#125; 做错误日志收集，帮助发现与定位问题。 已知的错误都在开发时处理掉了。需要捕获的是未知的错误： 未知的接口返回内容 未知的资源加载情况，如图片或其他媒体资源。 改了一处代码，没发现另一处被影响到的逻辑 较深层级的交互逻辑，没有在测试阶段被发现的问题 在MVVM时代，用window.onerror捕获错误已经不适用了 通常MVVM项目会有一个（或多个）入口html or js，假如我在入口处如此监听全局错误： 1234567891011121314151617&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;app&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onerror = function (msg, script, line, columns, error) &#123; console.log(msg); console.log(script); console.log(line); console.log(columns); &#125; &lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://XXX.XXX.XXX/static/js/app.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/body&gt; 当入口js逻辑出现问题时,控制台出现报错信息 image 然而在onerror的错误捕获代码却输出 1234console.log(msg); //Script error.console.log(script); //&apos;&apos;console.log(line); //0console.log(columns); //0 这是什么鬼？以下是网络上的一些搜索结果 因为同源策略，Firefox, Chrome, Safari 等浏览器， 页面引用的非同域的外部脚本中抛出了异常，本页面无权限获得这个异常详情， 所以就成了 Script error.。 解决办法有：1.静态文件服务器设置 Access-Control-Allow-Origin 头信息。2.script 标签添加 crossorigin 属性。 似乎一切就明朗了吗？就能早点回家吃饭了吗？ 图样图森破啊~ 就算最后能按方法解决掉script跨域脚本的问题。也无法确实可行地捕获到vue代码里的错误。webpack合并压缩混淆过的代码，输出的报错信息可读性也是有限的。另外，在vue组件内的错误其实是已经被捕获过，不会再抛给全局的onerror。 vue是个先进的框架，它自己有便捷健全的错误监听机制。 捕获vue项目内全局错误 errorHandLer： 先读文档。具体用法： 1234567891011121314151617181920212223242526Vue.config.errorHandler = function (err, vm, info) &#123; let &#123; message, name, script, line, column, stack &#125; = err; // 在vue提供的error对象中，script、line、column目前是空的。但这些信息其实在错误栈信息里可以看到。 script = !_.isUndefined(script) ? script : &apos;&apos;; line = !_.isUndefined(line) ? line : 0; column = !_.isUndefined(column) ? line : 0; // 解析错误栈信息 let stackStr = stack ? stack.toString() : `$&#123;name&#125;:$&#123;message&#125;`; console.log(stackStr); /* ReferenceError: bbb is not defined at a.created (shortLink.vue:361) at It (vue.esm.js:2701) at a.t._init (vue.esm.js:4293) at new a (vue.esm.js:4463) at ee (vue.esm.js:3740) at init (vue.esm.js:3557) at u (vue.esm.js:5212) at l (vue.esm.js:5155) at a.t.nodeOps [as __patch__] (vue.esm.js:5697) at a.t._update (vue.esm.js:2460) */ // report code&#125; 错误信息已经很足够了。如果有错误上报系统，开发者根据上报的错误信息回归到具体的案发现场，配合webpack的sourceMap也能快速定位问题。 捕获vue组件错误 最近vue2.5发布，新增了一个errorCaptured钩子: 先看文档 errorCaptured所为一个vue组件的钩子函数，能捕获到子孙组件的错误。在错误信息的显示上面与errorHandler是一致的，在做错误收集时无必要重复。但errorCaptured的目的我估计更加集中于去做即时性的兼容处理，这与try catch的性质是相似的，但vue提供了一个组件层面可用的try catch。 特殊位置埋点捕获 比如说在收发请求时，有些问题并不会造成一个js的报错，然而前后端的交互也经常会因为协议上面的疏漏而造成问题。在项目中我用到了vue-resource这个http请求库。本身支持Promise API。那我可以这样做： 12345678910111213141516Vue.http.get(url).then((resp) =&gt; &#123; if (返回数据不符合正确的格式) &#123; throw `格式不正确`; &#125; if (typeof successFn === &apos;function&apos;) &#123; successFn(resp.body); //在处理回调函数内部出错时，也会被捕获到错误 &#125;&#125;, resp =&gt; &#123; throw `网络问题的错误`;&#125;).catch((err) =&gt; &#123; // 捕获到的错误信息会被包含在err对象里 // report code /* 在收集错误信息时，可以选择性地把调用的url、method、query、response数据一并上报，方便还原案发现场。 */&#125;); 是否便于埋点捕获还与项目的构成有关系，假如说项目里的请求都各走各路，那么处理逻辑就会很分散，开发者也会烦于维护。 出问题是无可避免的，问题的解决手段才是更重要，在问题大范围扩散前能发现问题，至少在代码上线后能淡定一点。","categories":[],"tags":[]},{"title":"前端的UI自动化测试","slug":"前端的UI自动化测试","date":"2017-10-28T07:14:09.000Z","updated":"2017-10-28T08:41:05.159Z","comments":true,"path":"2017/10/28/前端的UI自动化测试/","link":"","permalink":"http://maizsss.github.io/2017/10/28/前端的UI自动化测试/","excerpt":"","text":"0. 背景 单元测试：对构成程序的每个单元进行测试。工程上的一个共识是，如果程序的每个模块都是正确的、模块与模块的连接是正确的、那么程序基本上就会是正确的。以上是抄的，我也不懂。我的理解分两块，什么是单元？可以是函数、接口、组件、事务（what？）。什么是测试？就是验证功能，给予相同的输入（可以是数据、行为），会有相同的输出。 TDD（Test-Driven Development）：测试驱动开发。现写测试，后写业务，或者并行。对写测试的开发要求较高。 vue、react等组件化框架天生易于被测试，如element对alert组件测试的例子。理论上项目中的vue、react等组件都可以写测试，但前提是组件封装优良，模块间松耦合，对代码编写规范有要求。 下面要吹的是一套针对与UI测试的套件。 1. 相关工具 测试框架: Mocha（可以参考阮一峰的文章） 断言库: Chai 详情看文章介绍 测试工具: nightmare(git:https://github.com/segmentio/nightmare)。这是一个基于electron的自动化框架，相比起PhantomJS的语法更加简单。 2. 使用 全局安装mocha：npm install -g mocha 12345678# Linux &amp; Mac$ env ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ $ npm install# Windows$ set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/$ npm install 运行一个测试 1mocha ./testDemo/demo3.useChai.fn1.test.js 运行一系列测试 1mocha ./testDemo 3. nightmare的使用123456789101112131415161718192021const Nightmare = require('nightmare');const nightmare = Nightmare(&#123; show: true, //是否显示浏览器窗口 width: 1920, //浏览器窗口宽度 height: 1080 //浏览器窗口高度&#125;);nightmare .goto('http://www.linghit.com/') //打开一个url .wait('#generalize_content') //等待某个元素出现在dom .wait(2000) //等待2000ms .click('#closed') //点击某个dom .evaluate(function () &#123; //在浏览器环境下的操作 return window.location.href; &#125;) .end() //结束一个nightmare队列 .then((res) =&gt; &#123; //获取到evaluate的return值 console.log(res); &#125;) .catch((err) =&gt; &#123; //捕捉错误 console.log(err); &#125;) 4. mocha结合nightmare进行测试1234567891011121314151617181920212223242526272829303132333435'use strict';const expect = require('chai').expect;const Nightmare = require('nightmare');const nightmare = Nightmare(&#123; show: true, width: 1920, height: 1080&#125;);describe('灵机官网', function() &#123; // 用例超时时长 this.timeout(5 * 1000); it('页面是否能正常打开', (done) =&gt; &#123; nightmare .goto('http://www.linghit.com/') .wait('#generalize_content') .wait(1000) .click('#closed') .evaluate(function () &#123; var bannerLen = $('.banner').length; return &#123; bannerLen: bannerLen &#125;; &#125;) .end() .then((res) =&gt; &#123; expect(res.bannerLen).to.above(0); done(); &#125;) .catch((err) =&gt; &#123; done(err); &#125;) &#125;);&#125;); 5. 使用mochawesome生成测试报告1mocha .\\testDemo\\demo7.linghit.report.test.js --reporter mochawesome 6. 其他东西 nightmare的截屏 1.screenshot([path][, clip]) mocha的钩子函数 123456789101112131415before(function() &#123; // 在本区块的所有测试用例之前执行&#125;);after(function() &#123; // 在本区块的所有测试用例之后执行&#125;);beforeEach(function() &#123; // 在本区块的每个测试用例之前执行&#125;);afterEach(function() &#123; // 在本区块的每个测试用例之后执行&#125;); 通过node脚本定时巡航页面，并上报测试结果 1234567891011121314151617181920212223&lt;!-- index.js --&gt;setInterval(() =&gt; &#123; // 当然定时任务不会用setInterval。。。 shell.exec('mocha ./testDemo/demo8.other.test.js --reporter mochawesome', function(err) &#123; if( err ) &#123; throw err; &#125; else &#125; &#125;);&#125;, 10 * 1000);&lt;!-- 测试脚本 --&gt;after(async function() &#123; // 统一上报测试结果 var options = &#123; method: 'POST', url: 'http://localhost:3000/api/test/report', body: reportObj, //reportObj对象收集图片url，错误信息等等 json: true &#125;; var res = await request(options); &#125;);","categories":[],"tags":[]}]}