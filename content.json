{"meta":{"title":"maizsss blog","subtitle":null,"description":null,"author":"maizsss","url":"http://maizsss.github.io"},"pages":[{"title":"categories","date":"2017-10-28T07:46:47.000Z","updated":"2018-01-07T07:57:46.977Z","comments":true,"path":"categories/index.html","permalink":"http://maizsss.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-10-28T07:46:22.000Z","updated":"2018-01-07T07:57:46.977Z","comments":true,"path":"tags/index.html","permalink":"http://maizsss.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux基础学习笔记(1)","slug":"Linux基础学习笔记(1)","date":"2018-01-07T08:02:25.000Z","updated":"2018-01-07T08:28:00.477Z","comments":true,"path":"2018/01/07/Linux基础学习笔记(1)/","link":"","permalink":"http://maizsss.github.io/2018/01/07/Linux基础学习笔记(1)/","excerpt":"","text":"安装虚拟机 虚拟机对于初上手Linux系统的人来说，是最经济的选择。能够省去买云服务器的费用，也能从Linux的安装开始学习Linux。在工作中也能从Windows或者Mac无缝切换到虚拟机环境。 virtual box下载 centos镜像 其他事项 虚拟机配置（用于开发）：redhat64位、1g内存、40g硬盘 点击虚拟机界面后，鼠标会独占，右ctrl能取消独占 设置windows与虚拟机之间的复制粘贴：设备-共享粘贴板-双向。（好像无效，还是用ssh吧。） mirrors.163.com是网易的镜像站，含有大量Linux镜像资源,免除国内访问国外资源很慢的烦恼。 准备工作 Minimal的镜像是最小系统镜像，不包含网络等其他软件，需要自己配置。 ifconfig（查看网络配置） yum install net-tools (安装该工具使ifconfig命令可用) ip addr（查看ip地址） vi /etc/sysconfig/network-scripts/ifcfg-xx xx在ip addr的2：{网卡名} 编辑ONBOOT=yes 命令： service network restart yum需要先替换默认源：步骤 内网ip换成局域网ip。虚拟机先关机，设置-网络-连接方式改成桥接。得到局域网ip可用于虚拟机ssh连接。 wget（yum install wget） mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup cd /etc/yum.repos.d/ wget http://mirrors.163.com/.help/CentOS7-Base-163.repo yum clean all; yum makecache SSH服务 SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。 安装 安装SSH yum install openssh-server 启动 service sshd start 设置开机运行 chkconfig sshd on linux平台安装SSH客户端 yum install openssh-clients(其实在安装openssh-server时已经顺便被安装好) 连接。 ssh {帐号}@{ip:端口(不填默认22)} -&gt; 输入密码 SSH config config是为了方便批量管理多个ssh config存放在 ~/.ssh/config config配置语法12345678910host &quot;&#123;名称1&#125;&quot; HostName &#123;ip&#125; User &#123;帐号&#125; Port &#123;端口&#125; host &quot;&#123;名称2&#125;&quot; HostName &#123;ip&#125; User &#123;帐号&#125; Port &#123;端口&#125;// 设置完就能以这种形式连接：ssh &#123;名称&#125; ssh免密登录： ssh key（使用非对称方式生成公钥和私钥）。私钥（~/.ssh）,公钥（~/.ssh/authorized_keys） linux生成ssh key： 1234cd ~/.sshssh-keygen输入名字输入密码（可空） 把.pub（公钥文件）内容放在~/.ssh/authorized_keys ssh-add ~/.ssh/imooc_rsa(linux需要) ssh安全端口（修改端口）123456vim /etc/ssh/sshd_config——————Port &#123;端口号1&#125;Port &#123;端口号2&#125;——————service sshd restart Linux常用命令软件操作命令 软件包管理器：yum 安装软件：yum install xxx 卸载软件：yum remove xxx 搜索软件：yum search xxx 清理缓存：yum clean packages 列出已安装：yum list 软件包信息：yum info xxx 硬件资源信息 内存：free -m 硬盘：df -h 负载：w或top load average： 0.00（最近1min） 0.01（最近5min） 0.05（最近10min） 等于1是满负荷 大于1超负荷 0.6~0.7是健康值 cpu个数和核数 cat /proc/cpuinfo cat是查看文件内容 文件操作命令 Linux文件目录结构 根目录: / 家目录：/home 临时目录: /tmp 配置目录: /etc 用户程序目录: /usr 文件基本操作命令 查看目录下的文件: ls（ls -al == ll 显示文件详细信息） 新建文件： touch 新建文件夹：mkdir（-p 表示循环生成） 进入目录： cd 删除文件和目录：rm（-r 表示循环删除， -rf 表示强制删除） 复制：cp 移动： mv 显示路径：pwd Vim 教程 i键进入insert模式 esc退出insert模式，然后:wq(保存退出)，:q(退出)，:w(保存) G（最后一行），gg（行首） dd(删除本行), u(恢复) yy（复制光标所在行），p（粘贴） 文件权限421 r=4(读) w=2(写) x=1(可执行) drwxr-xr-x d表示文件类型，755 文件搜索，查找，读取 从文件尾部读取：tail(-f) 从文件头部读取：head 读取整个文件：cat 分页读取：more(enter键往下继续读) 可控分页：less 搜索关键字：grep(-n显示行数 “{关键字}” {文件名}) 查找文件：find（如：find . -name “{文件名关键字}”，-type表示查找类型，-ctime表示更新过的时间、天） 统计个数：wc 管道：|（把上一次操作的结果传递给下一次操作，如：grep “{关键字}” {文件名}|wc -l，统计某文件里出现某关键字的行数） 文件压缩解压 man {命令}（查看一个命令的说明） 压缩、解压：tar1234567-cf &#123;文件名.tar&#125; &#123;文件名&#125;,创建一个压缩文件-tf,查看压缩文件内容-tvf,查看压缩文件详细内容-xf,解压文件-czvf &#123;文件名.tar.gz&#125; &#123;文件名&#125;,创建一个.gz压缩文件并查看-tzvf， 查看一个.gz压缩文件-xzvf,解压一个.gz压缩文件 系统用户命令 添加用户：useradd 123cd /homeuseradd &#123;用户名&#125;passwd &#123;用户名&#125; adduser（与useradd有何不同） 删除用户：userdel（-r，彻底删除） 设置密码：passwd 防火墙设置 安装：yum install firewalld 启动：service firewalld start 重启：service firewalld restart 检查状态：service firewalld status 关闭或禁用防火墙：service firewalld stop/disable firewall-cmd 移除服务：–remove-service=ssh 添加服务：–add-service=ssh 查询具体的某个服务：–query-service=ssh 列出服务：–list-services 查询端口：–query-port=22/tcp 添加端口：–add-port=22/tcp 列出端口：–list-ports 列出区域配置情况：–list-all-zones 提权和文件上传下载操作 提权 sudo12visudo增加行:%&#123;需要提权的帐号&#125; ALL=(ALL) ALL, 保存退出 文件下载 wget {链接} curl1curl -o &#123;文件名&#125; &#123;链接&#125; 文件上传 从本地上传到远端：scp {文件名} {用户名}@{ip}:{路径} 从远端下载到本地：scp {用户名}@{ip}:{路径/文件} {本地路径} xshell上传文件1234//远端需要安装一个软件yum install lrzszrz //弹出弹窗，选择文件就能实现上传sz &#123;文件名&#125; //下载","categories":[],"tags":[]},{"title":"前端错误监控平台的搭建","slug":"前端错误监控平台的搭建","date":"2017-12-06T10:25:10.000Z","updated":"2018-01-07T07:57:46.976Z","comments":true,"path":"2017/12/06/前端错误监控平台的搭建/","link":"","permalink":"http://maizsss.github.io/2017/12/06/前端错误监控平台的搭建/","excerpt":"","text":"前端错误监控系统的搭建前端错误监控是什么 把错误日志打点到系统，系统提供日志数据可视化便于分析与定位问题。也可以称为日志分析平台。 ELK是常用的日志分析平台，ELK是ElasticSearch、Logstash和Kiabana三个开源工具的简称，分别提供搜索、存储、可视化功能。具体可参考一篇文章:戳这里。 针对前端的监控有多种，“应用错误”、“代码级别错误”、“性能”、“用户行为”，这次主要从“代码级别错误”来展开讨论。 最小化的需求 image 监控系统如何实现 从需求上考虑，无必要搭建如ELK这样庞大的系统，有点杀鸡用牛刀的节奏。在一定应用群规模以内，可以把日志系统简单理解为一个能读写数据库的服务，加上其他辅助手段(定时任务、发消息套件)就能整合成一套可用、灵活、方便扩展的系统。 系统用前后分离的方式实现，罗列一下主要的技术。前端：vue、element-ui、echarts，服务端：nodejs7.6+koa2、db：mysql、orm: Sequelize、nodejs守护进程：pm2 系统架构图： image 选择从零开始搭建一套系统，另一方面也是为了自己实践一下服务端开发领域上面的技术。有了上述方案以后，掌握一定服务端技术的人其实已经能知道具体采用什么技术手段、如何去实现。我自己在实现功能过程中，也有过很多考虑，也踩过一些坑。 具体实现 业务端的埋点捕获不多说了，在这篇文章有较为详细的说明，延伸到其他技术栈也是同样的思路。 管理端 后台管理界面天然适合做成SPA，利用vue实现组件化开发，工作流上配合webpack进行一系列的工程化处理，可以十分快速地构建起一个前端应用。 UI框架上面，element-ui在之前的一些后台系统上面有过实践，这次为了图方便也选用了同样的。element-ui由国内饿了么团队开源，有vue、react版本，vue版本相对支持力度大，目前已经更新到2.0版本，而项目中用到的是1.4.X版本，这个版本官方维护到这年12月份。element-ui的文档友好，在github的issue回应也及时，UI组件能满足大多数业务常用需求。属于国内基于vue的UI组件库中较领先的。 另外值得一提的是在基于react的UI库中，由阿里开源的ant-design是个十分大而全的技术，UI设计上面也更简洁紧凑（提供了一套管理系统的设计规范），组件、功能更加丰富，提供一站式应用架构，可以短时间内就能把最小应用搭建起来。 在实现一些小规模的数据可视化需求中，国内echarts的出现频率很高，较大规模的需求可能就要选择highcharts，毕竟后者起步早，背后团队力量大，文档还详细易懂。两者都是以全配置的方式驱动，每种常用的图表官方或社区都有对应的例子参考。但如果有特殊需求就要花点时间翻阅长溜溜的配置文档。在配置驱动这个点上延伸想象，可以编写数据过滤器来实现图表的复用，快速消化基本的数据可视化需求。 服务端 为了能让系统能在短时间内运行起来，加上自己在服务端开发上涉足还浅，服务端选择的技术相对保守。市面上有整套的服务端解决方案，如eggjs、thinkjs，这类框架已经把service、日志、进程管理、定时任务、部署等都囊括了，最后并没有选用这些技术。npm庞大的生态，让我不需要担心功能的实现，每块领域都有优秀的npm包来解决。 Koa的使用需要理解中间件与context（上下文）的概念，但其实express也一样，只是koa对express而言是承接的关系，koa是面向未来的web框架。 Koa是一个轻量级的、极富表现力的http开发框架。一个web request会通过Koa的中间件栈，来动态完成response的处理。同时，Koa2采用了async和await的语法来增强中间件的表现力。Koa本身做的工作仅仅是定制了中间件的编写规范，而不内置任何中间件。 12345678910111213// 伪代码，捕获路由间抛出的错误日志。async function logger(ctx, next) &#123; try &#123; await next(); &#125; catch (error) &#123; //记录异常日志 console.error(moment().format(&apos;YYYY-MM-DD HH:mm:ss&apos;), &apos;, errorMsg:&apos;, JSON.stringify(formatLog(&#123;ctx, msg: error.toString()&#125;))); &#125;&#125; router.all( &apos;*&apos;, logger); pm2会把应用内的console输出作为日志，以上代码简单利用了这点做了简单的日志服务，另外配合定时任务按天分割日志、清除N天前的日志文件。pm2作为node的进程管理包是主流选择，它支持负载均衡（node cluster），0秒重载等，还能支持配置启动。 123456789101112131415161718192021222324apps : [ &#123; name : &apos;linghit_fe&apos;, script : &apos;bin/www&apos;, log_file : &quot;./logs/pm2-log.log&quot;, out_file : &quot;./logs/pm2-out.log&quot;, error_file : &quot;./logs/pm2-error.log&quot;, pid_file: &quot;./logs/pm2-linghit_fe.pid&quot;, merge_logs : true, log_date_format : &quot;YYYY-MM-DD HH:mm:SS&quot;, max_memory_restart: &quot;150M&quot;, instances : 2, exec_mode : &quot;cluster&quot;, env: &#123; COMMON_VARIABLE: &apos;true&apos; &#125;, env_production : &#123; NODE_ENV: &apos;production&apos; &#125;, env_development : &#123; NODE_ENV: &apos;development&apos; &#125; &#125;] pm2能以cluster的方式启动应用，充分发挥多核cpu的性能，本身是利用了node的cluster集群模块。在这个监控应用上，我开启了两个web进程（linghit_fe）,与其他的辅助进行，linghit_fe_logmaster用于管理日志，linghit_fe_task用于管理定时任务。再往深一点的主子进程控制，数据共享等还要继续学习深化。 image Sequelize作为一个mysql的orm包，能简化大量的数据库操作，通过定义model与数据表建立映射关系，在这之后的数据库操作都是方便、可靠的。Sequelize基于Promise实现异步流程控制，也能与async await很好配合使用。 1234567891011121314151617181920212223const modelA = sequelize.define(&apos;modelName&apos;, &#123; columnA: &#123; type: Sequelize.BOOLEAN, validate: &#123; is: [&quot;[a-z]&quot;,&apos;i&apos;], // will only allow letters max: 23, // only allow values &lt;= 23 isIn: &#123; args: [[&apos;en&apos;, &apos;zh&apos;]], msg: &quot;Must be English or Chinese&quot; &#125; &#125;, field: &apos;column_a&apos; // Other attributes here &#125;, columnB: Sequelize.STRING&#125;)sequelize.sync();await modelA.findAndCountAll(&#123; where: whereQuery, offset: per_page * (current - 1), limit: per_page, order: [[&apos;create_time&apos;, &apos;DESC&apos;]]&#125;); 报警机制，定时任务+方糖。 路由管理。引用了koa-router包，使用方式。在这套代码里我设计成集中管理的模式，集中在一处能看到整个应用的路由关系，避免随着业务扩展而逻辑凌乱路由分散。具体看码。 使用loadtest进行简单的压力测试，目前能稳定在每秒100请求下。到了120以上开始内存上涨，延时增加，但服务还没崩。150以上开始出现极大延时，大量请求超时，吞吐量下降。 12345678910111213141516171819var loadtest = require(&apos;loadtest&apos;);var options = &#123; url: url, method: &apos;GET&apos;, // maxRequests: 1000, requestsPerSecond: 100, concurrency: 20, statusCallback: function (error, result, latency) &#123; console.log(&apos;总请求量： %j,错误： %j，rps： %j，延时：%j ms &apos;, latency.totalRequests, latency.totalErrors, latency.rps, latency.meanLatencyMs); &#125;&#125;;loadtest.loadTest(options, function(error, result)&#123; if (error) &#123; return console.error(&apos;Got an error: %s&apos;, error); &#125; console.log(&apos;Tests run successfully&apos;);&#125;); 待扩展 统计数据的查询。根据传参判断，大于72小时的以小时为单位，其余以分钟为单位。查询语句上先以create_time（时间戳）用FROM_UNIXTIME格式化成对应的sqlFormat格式，在此基础上（date_format）分组查询做出统计。有没有更好的查询办法让统计粒度更自由？比如按10分钟，30分钟，天。 12345678910111213141516171819// 定义时段分割，小于1小时的以分钟为分割单位let timeSplit = (countQuery.create_time.$lt - countQuery.create_time.$gt) &gt;= (72 * 60 * 60) ? &#123; unit: 60 * 60, sqlFormat: &apos;%Y-%m-%e %H:00&apos;, momentFormat: &apos;YYYY-MM-D HH:00&apos;&#125; : &#123; unit: 60, sqlFormat: &apos;%Y-%m-%e %H:%i&apos;, momentFormat: &apos;YYYY-MM-D HH:mm&apos;&#125;;// 查询let queryCount = await db[modelName].count(&#123; where: countQuery, order: [&apos;create_time&apos;, &apos;ASC&apos;], attributes: [ [db.sequelize.fn(&apos;FROM_UNIXTIME&apos;, db.sequelize.col(&apos;create_time&apos;), timeSplit.sqlFormat), &apos;date_format&apos;] ], group: &apos;date_format&apos;&#125;); 用户模块、权限模块。在系统内部就可以管理不同项目接收报警信息的人，而不需要通过方糖扫码。 image APM模块。页面性能分析，浏览器分布分析。 页面巡航模块。利用UI自动化测试定时跑测试脚本，监控各个页面的实际情况。 大数据量的解决方案？目前定时(1个月)清理db。 防刷、防攻击手段？？？ nginx实现的多机集群均衡负载？？？（单机都还要省着用，还多机?） 1234upstream XXX.XXX.com &#123; server 123.456.789.111:7082; server 123.456.789.222:7082; &#125; 还有什么使用上面的优化？？","categories":[],"tags":[]},{"title":"vue项目的错误捕获方式","slug":"vue项目的错误捕获方式","date":"2017-11-01T04:16:28.000Z","updated":"2018-01-07T07:57:46.975Z","comments":true,"path":"2017/11/01/vue项目的错误捕获方式/","link":"","permalink":"http://maizsss.github.io/2017/11/01/vue项目的错误捕获方式/","excerpt":"","text":"为什么要捕获错误？ 为什么要花那么多的时间成本和精力去做什么捕获错误的事情？为什么要提高代码质量？为什么要让项目更健壮？这个问题我也不懂回答，不过这就好比”有得吃就行了，为什么要吃好，为什么要花大钱去吃什么米其林三星。” 目前为止我接触到的需要捕获错误的地方或目的有2： 做错误兼容，如： 1234var obj = &#123;&#125;;try &#123; obj = JSON.parse(json);&#125; catch(e) &#123;&#125; 做错误日志收集，帮助发现与定位问题。 已知的错误都在开发时处理掉了。需要捕获的是未知的错误： 未知的接口返回内容 未知的资源加载情况，如图片或其他媒体资源。 改了一处代码，没发现另一处被影响到的逻辑 较深层级的交互逻辑，没有在测试阶段被发现的问题 在MVVM时代，用window.onerror捕获错误已经不适用了 通常MVVM项目会有一个（或多个）入口html or js，假如我在入口处如此监听全局错误： 1234567891011121314151617&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;app&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; &lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; window.onerror = function (msg, script, line, columns, error) &#123; console.log(msg); console.log(script); console.log(line); console.log(columns); &#125; &lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://XXX.XXX.XXX/static/js/app.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/body&gt; 当入口js逻辑出现问题时,控制台出现报错信息 image 然而在onerror的错误捕获代码却输出 1234console.log(msg); //Script error.console.log(script); //&apos;&apos;console.log(line); //0console.log(columns); //0 这是什么鬼？以下是网络上的一些搜索结果 因为同源策略，Firefox, Chrome, Safari 等浏览器， 页面引用的非同域的外部脚本中抛出了异常，本页面无权限获得这个异常详情， 所以就成了 Script error.。 解决办法有：1.静态文件服务器设置 Access-Control-Allow-Origin 头信息。2.script 标签添加 crossorigin 属性。 似乎一切就明朗了吗？就能早点回家吃饭了吗？ 图样图森破啊~ 就算最后能按方法解决掉script跨域脚本的问题。也无法确实可行地捕获到vue代码里的错误。webpack合并压缩混淆过的代码，输出的报错信息可读性也是有限的。另外，在vue组件内的错误其实是已经被捕获过，不会再抛给全局的onerror。 vue是个先进的框架，它自己有便捷健全的错误监听机制。 捕获vue项目内全局错误 errorHandLer： 先读文档。具体用法： 1234567891011121314151617181920212223242526Vue.config.errorHandler = function (err, vm, info) &#123; let &#123; message, name, script, line, column, stack &#125; = err; // 在vue提供的error对象中，script、line、column目前是空的。但这些信息其实在错误栈信息里可以看到。 script = !_.isUndefined(script) ? script : &apos;&apos;; line = !_.isUndefined(line) ? line : 0; column = !_.isUndefined(column) ? line : 0; // 解析错误栈信息 let stackStr = stack ? stack.toString() : `$&#123;name&#125;:$&#123;message&#125;`; console.log(stackStr); /* ReferenceError: bbb is not defined at a.created (shortLink.vue:361) at It (vue.esm.js:2701) at a.t._init (vue.esm.js:4293) at new a (vue.esm.js:4463) at ee (vue.esm.js:3740) at init (vue.esm.js:3557) at u (vue.esm.js:5212) at l (vue.esm.js:5155) at a.t.nodeOps [as __patch__] (vue.esm.js:5697) at a.t._update (vue.esm.js:2460) */ // report code&#125; 错误信息已经很足够了。如果有错误上报系统，开发者根据上报的错误信息回归到具体的案发现场，配合webpack的sourceMap也能快速定位问题。 捕获vue组件错误 最近vue2.5发布，新增了一个errorCaptured钩子: 先看文档 errorCaptured所为一个vue组件的钩子函数，能捕获到子孙组件的错误。在错误信息的显示上面与errorHandler是一致的，在做错误收集时无必要重复。但errorCaptured的目的我估计更加集中于去做即时性的兼容处理，这与try catch的性质是相似的，但vue提供了一个组件层面可用的try catch。 特殊位置埋点捕获 比如说在收发请求时，有些问题并不会造成一个js的报错，然而前后端的交互也经常会因为协议上面的疏漏而造成问题。在项目中我用到了vue-resource这个http请求库。本身支持Promise API。那我可以这样做： 12345678910111213141516Vue.http.get(url).then((resp) =&gt; &#123; if (返回数据不符合正确的格式) &#123; throw `格式不正确`; &#125; if (typeof successFn === &apos;function&apos;) &#123; successFn(resp.body); //在处理回调函数内部出错时，也会被捕获到错误 &#125;&#125;, resp =&gt; &#123; throw `网络问题的错误`;&#125;).catch((err) =&gt; &#123; // 捕获到的错误信息会被包含在err对象里 // report code /* 在收集错误信息时，可以选择性地把调用的url、method、query、response数据一并上报，方便还原案发现场。 */&#125;); 是否便于埋点捕获还与项目的构成有关系，假如说项目里的请求都各走各路，那么处理逻辑就会很分散，开发者也会烦于维护。 出问题是无可避免的，问题的解决手段才是更重要，在问题大范围扩散前能发现问题，至少在代码上线后能淡定一点。","categories":[],"tags":[]},{"title":"前端的UI自动化测试","slug":"前端的UI自动化测试","date":"2017-10-28T07:14:09.000Z","updated":"2018-01-07T07:57:46.975Z","comments":true,"path":"2017/10/28/前端的UI自动化测试/","link":"","permalink":"http://maizsss.github.io/2017/10/28/前端的UI自动化测试/","excerpt":"","text":"0. 背景 单元测试：对构成程序的每个单元进行测试。工程上的一个共识是，如果程序的每个模块都是正确的、模块与模块的连接是正确的、那么程序基本上就会是正确的。以上是抄的，我也不懂。我的理解分两块，什么是单元？可以是函数、接口、组件、事务（what？）。什么是测试？就是验证功能，给予相同的输入（可以是数据、行为），会有相同的输出。 TDD（Test-Driven Development）：测试驱动开发。现写测试，后写业务，或者并行。对写测试的开发要求较高。 vue、react等组件化框架天生易于被测试，如element对alert组件测试的例子。理论上项目中的vue、react等组件都可以写测试，但前提是组件封装优良，模块间松耦合，对代码编写规范有要求。 下面要吹的是一套针对与UI测试的套件。 1. 相关工具 测试框架: Mocha（可以参考阮一峰的文章） 断言库: Chai 详情看文章介绍 测试工具: nightmare(git:https://github.com/segmentio/nightmare)。这是一个基于electron的自动化框架，相比起PhantomJS的语法更加简单。 2. 使用 全局安装mocha：npm install -g mocha 12345678# Linux &amp; Mac$ env ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ $ npm install# Windows$ set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/$ npm install 运行一个测试 1mocha ./testDemo/demo3.useChai.fn1.test.js 运行一系列测试 1mocha ./testDemo 3. nightmare的使用123456789101112131415161718192021const Nightmare = require('nightmare');const nightmare = Nightmare(&#123; show: true, //是否显示浏览器窗口 width: 1920, //浏览器窗口宽度 height: 1080 //浏览器窗口高度&#125;);nightmare .goto('http://www.linghit.com/') //打开一个url .wait('#generalize_content') //等待某个元素出现在dom .wait(2000) //等待2000ms .click('#closed') //点击某个dom .evaluate(function () &#123; //在浏览器环境下的操作 return window.location.href; &#125;) .end() //结束一个nightmare队列 .then((res) =&gt; &#123; //获取到evaluate的return值 console.log(res); &#125;) .catch((err) =&gt; &#123; //捕捉错误 console.log(err); &#125;) 4. mocha结合nightmare进行测试1234567891011121314151617181920212223242526272829303132333435'use strict';const expect = require('chai').expect;const Nightmare = require('nightmare');const nightmare = Nightmare(&#123; show: true, width: 1920, height: 1080&#125;);describe('灵机官网', function() &#123; // 用例超时时长 this.timeout(5 * 1000); it('页面是否能正常打开', (done) =&gt; &#123; nightmare .goto('http://www.linghit.com/') .wait('#generalize_content') .wait(1000) .click('#closed') .evaluate(function () &#123; var bannerLen = $('.banner').length; return &#123; bannerLen: bannerLen &#125;; &#125;) .end() .then((res) =&gt; &#123; expect(res.bannerLen).to.above(0); done(); &#125;) .catch((err) =&gt; &#123; done(err); &#125;) &#125;);&#125;); 5. 使用mochawesome生成测试报告1mocha .\\testDemo\\demo7.linghit.report.test.js --reporter mochawesome 6. 其他东西 nightmare的截屏 1.screenshot([path][, clip]) mocha的钩子函数 123456789101112131415before(function() &#123; // 在本区块的所有测试用例之前执行&#125;);after(function() &#123; // 在本区块的所有测试用例之后执行&#125;);beforeEach(function() &#123; // 在本区块的每个测试用例之前执行&#125;);afterEach(function() &#123; // 在本区块的每个测试用例之后执行&#125;); 通过node脚本定时巡航页面，并上报测试结果 1234567891011121314151617181920212223&lt;!-- index.js --&gt;setInterval(() =&gt; &#123; // 当然定时任务不会用setInterval。。。 shell.exec('mocha ./testDemo/demo8.other.test.js --reporter mochawesome', function(err) &#123; if( err ) &#123; throw err; &#125; else &#125; &#125;);&#125;, 10 * 1000);&lt;!-- 测试脚本 --&gt;after(async function() &#123; // 统一上报测试结果 var options = &#123; method: 'POST', url: 'http://localhost:3000/api/test/report', body: reportObj, //reportObj对象收集图片url，错误信息等等 json: true &#125;; var res = await request(options); &#125;);","categories":[],"tags":[]}]}