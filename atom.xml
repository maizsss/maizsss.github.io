<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maizsss blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maizsss.github.io/"/>
  <updated>2018-01-07T08:28:00.477Z</updated>
  <id>http://maizsss.github.io/</id>
  
  <author>
    <name>maizsss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux基础学习笔记(1)</title>
    <link href="http://maizsss.github.io/2018/01/07/Linux%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <id>http://maizsss.github.io/2018/01/07/Linux基础学习笔记(1)/</id>
    <published>2018-01-07T08:02:25.000Z</published>
    <updated>2018-01-07T08:28:00.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><blockquote><p>虚拟机对于初上手Linux系统的人来说，是最经济的选择。能够省去买云服务器的费用，也能从Linux的安装开始学习Linux。在工作中也能从Windows或者Mac无缝切换到虚拟机环境。</p></blockquote><ul><li><a href="http://download.virtualbox.org/virtualbox/5.2.4/VirtualBox-5.2.4-119785-Win.exe" target="_blank" rel="noopener">virtual box下载</a></li><li><a href="http://mirrors.163.com/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1708.iso" target="_blank" rel="noopener">centos镜像</a></li><li>其他事项<ul><li>虚拟机配置（用于开发）：redhat64位、1g内存、40g硬盘</li><li>点击虚拟机界面后，鼠标会独占，右ctrl能取消独占</li><li>设置windows与虚拟机之间的复制粘贴：设备-共享粘贴板-双向。（好像无效，还是用ssh吧。）</li><li><a href="mirrors.163.com">mirrors.163.com</a>是网易的镜像站，含有大量Linux镜像资源,免除国内访问国外资源很慢的烦恼。</li></ul></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>Minimal的镜像是最小系统镜像，不包含网络等其他软件，需要自己配置。</p></blockquote><ul><li>ifconfig（查看网络配置）<ul><li>yum install net-tools (安装该工具使ifconfig命令可用)</li></ul></li><li>ip addr（查看ip地址）</li><li>vi /etc/sysconfig/network-scripts/ifcfg-xx <ul><li>xx在ip addr的2：{网卡名}</li><li>编辑ONBOOT=yes</li><li>命令： service network restart</li></ul></li><li>yum需要先替换默认源：<a href="http://mirrors.163.com/.help/centos.html" target="_blank" rel="noopener">步骤</a><ul><li>内网ip换成局域网ip。虚拟机先关机，设置-网络-连接方式改成桥接。得到局域网ip可用于虚拟机ssh连接。</li><li>wget（yum install wget）</li><li>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</li><li>cd /etc/yum.repos.d/</li><li>wget <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></li><li>yum clean all; yum makecache</li></ul></li></ul><h2 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h2><blockquote><p>SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>安装SSH yum install openssh-server</li><li>启动 service sshd start</li><li>设置开机运行 chkconfig sshd on</li><li>linux平台安装SSH客户端 yum install openssh-clients(其实在安装openssh-server时已经顺便被安装好)</li><li>连接。 ssh {帐号}@{ip:端口(不填默认22)} -&gt; 输入密码</li></ul></blockquote><h4 id="SSH-config"><a href="#SSH-config" class="headerlink" title="SSH config"></a>SSH config</h4><ul><li>config是为了方便批量管理多个ssh</li><li>config存放在 ~/.ssh/config</li><li>config配置语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">host &quot;&#123;名称1&#125;&quot;</span><br><span class="line">    HostName &#123;ip&#125;</span><br><span class="line">    User &#123;帐号&#125;</span><br><span class="line">    Port &#123;端口&#125;</span><br><span class="line">    </span><br><span class="line">host &quot;&#123;名称2&#125;&quot;</span><br><span class="line">    HostName &#123;ip&#125;</span><br><span class="line">    User &#123;帐号&#125;</span><br><span class="line">    Port &#123;端口&#125;</span><br><span class="line">// 设置完就能以这种形式连接：ssh &#123;名称&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="ssh免密登录："><a href="#ssh免密登录：" class="headerlink" title="ssh免密登录："></a>ssh免密登录：</h4><ul><li>ssh key（使用非对称方式生成公钥和私钥）。私钥（~/.ssh）,公钥（~/.ssh/authorized_keys）</li><li><p>linux生成ssh key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen</span><br><span class="line">输入名字</span><br><span class="line">输入密码（可空）</span><br></pre></td></tr></table></figure></li><li><p>把.pub（公钥文件）内容放在~/.ssh/authorized_keys</p></li><li>ssh-add ~/.ssh/imooc_rsa(linux需要)</li><li><h4 id="ssh安全端口（修改端口）"><a href="#ssh安全端口（修改端口）" class="headerlink" title="ssh安全端口（修改端口）"></a>ssh安全端口（修改端口）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">——————</span><br><span class="line">Port &#123;端口号1&#125;</span><br><span class="line">Port &#123;端口号2&#125;</span><br><span class="line">——————</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure></li></ul><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h4 id="软件操作命令"><a href="#软件操作命令" class="headerlink" title="软件操作命令"></a>软件操作命令</h4><ul><li>软件包管理器：yum</li><li>安装软件：yum install xxx</li><li>卸载软件：yum remove xxx</li><li>搜索软件：yum search xxx</li><li>清理缓存：yum clean packages</li><li>列出已安装：yum list</li><li>软件包信息：yum info xxx</li></ul><h4 id="硬件资源信息"><a href="#硬件资源信息" class="headerlink" title="硬件资源信息"></a>硬件资源信息</h4><ul><li>内存：free -m</li><li>硬盘：df -h</li><li>负载：w或top<ul><li>load average： 0.00（最近1min） 0.01（最近5min） 0.05（最近10min）</li><li>等于1是满负荷</li><li>大于1超负荷</li><li>0.6~0.7是健康值</li></ul></li><li>cpu个数和核数<ul><li>cat /proc/cpuinfo</li><li>cat是查看文件内容</li></ul></li></ul><h4 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h4><ul><li>Linux文件目录结构<ul><li>根目录: /</li><li>家目录：/home</li><li>临时目录: /tmp</li><li>配置目录: /etc</li><li>用户程序目录: /usr</li></ul></li><li>文件基本操作命令<ul><li>查看目录下的文件: ls（ls -al == ll 显示文件详细信息）</li><li>新建文件： touch</li><li>新建文件夹：mkdir（-p 表示循环生成）</li><li>进入目录： cd</li><li>删除文件和目录：rm（-r 表示循环删除， -rf 表示强制删除）</li><li>复制：cp</li><li>移动： mv</li><li>显示路径：pwd</li></ul></li><li>Vim<ul><li><a href="http://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">教程</a></li><li>i键进入insert模式</li><li>esc退出insert模式，然后:wq(保存退出)，:q(退出)，:w(保存)</li><li>G（最后一行），gg（行首）</li><li>dd(删除本行), u(恢复)</li><li>yy（复制光标所在行），p（粘贴）</li></ul></li><li>文件权限421<ul><li>r=4(读) w=2(写) x=1(可执行)</li><li>drwxr-xr-x d表示文件类型，755</li></ul></li><li>文件搜索，查找，读取<ul><li>从文件尾部读取：tail(-f)</li><li>从文件头部读取：head</li><li>读取整个文件：cat</li><li>分页读取：more(enter键往下继续读)</li><li>可控分页：less</li><li>搜索关键字：grep(-n显示行数 “{关键字}” {文件名})</li><li>查找文件：find（如：find . -name “{文件名关键字}”，-type表示查找类型，-ctime表示更新过的时间、天）</li><li>统计个数：wc</li><li>管道：|（把上一次操作的结果传递给下一次操作，如：grep “{关键字}” {文件名}|wc -l，统计某文件里出现某关键字的行数）</li></ul></li><li>文件压缩解压<ul><li>man {命令}（查看一个命令的说明）</li><li>压缩、解压：tar<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-cf &#123;文件名.tar&#125; &#123;文件名&#125;,创建一个压缩文件</span><br><span class="line">-tf,查看压缩文件内容</span><br><span class="line">-tvf,查看压缩文件详细内容</span><br><span class="line">-xf,解压文件</span><br><span class="line">-czvf &#123;文件名.tar.gz&#125; &#123;文件名&#125;,创建一个.gz压缩文件并查看</span><br><span class="line">-tzvf， 查看一个.gz压缩文件</span><br><span class="line">-xzvf,解压一个.gz压缩文件</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="系统用户命令"><a href="#系统用户命令" class="headerlink" title="系统用户命令"></a>系统用户命令</h4><ul><li><p>添加用户：useradd</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">useradd &#123;用户名&#125;</span><br><span class="line">passwd &#123;用户名&#125;</span><br></pre></td></tr></table></figure></li><li><p>adduser（与useradd有何不同）</p></li><li>删除用户：userdel（-r，彻底删除）</li><li>设置密码：passwd</li></ul><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><ul><li>安装：yum install firewalld</li><li>启动：service firewalld start</li><li>重启：service firewalld restart</li><li>检查状态：service firewalld status</li><li>关闭或禁用防火墙：service firewalld stop/disable</li><li>firewall-cmd<ul><li>移除服务：–remove-service=ssh</li><li>添加服务：–add-service=ssh</li><li>查询具体的某个服务：–query-service=ssh</li><li>列出服务：–list-services</li><li>查询端口：–query-port=22/tcp</li><li>添加端口：–add-port=22/tcp</li><li>列出端口：–list-ports</li><li>列出区域配置情况：–list-all-zones</li><li><h4 id="提权和文件上传下载操作"><a href="#提权和文件上传下载操作" class="headerlink" title="提权和文件上传下载操作"></a>提权和文件上传下载操作</h4></li></ul></li><li><p>提权</p><ul><li>sudo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br><span class="line">增加行:%&#123;需要提权的帐号&#125; ALL=(ALL) ALL, 保存退出</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文件下载</p><ul><li>wget {链接}</li><li>curl<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o &#123;文件名&#125; &#123;链接&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>文件上传</p><ul><li>从本地上传到远端：scp {文件名} {用户名}@{ip}:{路径}</li><li>从远端下载到本地：scp {用户名}@{ip}:{路径/文件} {本地路径}</li><li>xshell上传文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//远端需要安装一个软件</span><br><span class="line">yum install lrzsz</span><br><span class="line">rz //弹出弹窗，选择文件就能实现上传</span><br><span class="line">sz &#123;文件名&#125; //下载</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装虚拟机&quot;&gt;&lt;a href=&quot;#安装虚拟机&quot; class=&quot;headerlink&quot; title=&quot;安装虚拟机&quot;&gt;&lt;/a&gt;安装虚拟机&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;虚拟机对于初上手Linux系统的人来说，是最经济的选择。能够省去买云服务器的费用，也能从L
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端错误监控平台的搭建</title>
    <link href="http://maizsss.github.io/2017/12/06/%E5%89%8D%E7%AB%AF%E9%94%99%E8%AF%AF%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://maizsss.github.io/2017/12/06/前端错误监控平台的搭建/</id>
    <published>2017-12-06T10:25:10.000Z</published>
    <updated>2018-01-07T07:57:46.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端错误监控系统的搭建"><a href="#前端错误监控系统的搭建" class="headerlink" title="前端错误监控系统的搭建"></a>前端错误监控系统的搭建</h1><h2 id="前端错误监控是什么"><a href="#前端错误监控是什么" class="headerlink" title="前端错误监控是什么"></a>前端错误监控是什么</h2><ul><li>把错误日志打点到系统，系统提供日志数据可视化便于分析与定位问题。也可以称为日志分析平台。</li><li>ELK是常用的日志分析平台，ELK是ElasticSearch、Logstash和Kiabana三个开源工具的简称，分别提供搜索、存储、可视化功能。具体可参考一篇文章:<a href="https://my.oschina.net/itblog/blog/547250" target="_blank" rel="noopener">戳这里</a>。</li><li>针对前端的监控有多种，“应用错误”、“代码级别错误”、“性能”、“用户行为”，这次主要从“代码级别错误”来展开讨论。</li></ul><h2 id="最小化的需求"><a href="#最小化的需求" class="headerlink" title="最小化的需求"></a>最小化的需求</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xpsli.com1.z0.glb.clouddn.com/feerror_share_pic1.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure><h2 id="监控系统如何实现"><a href="#监控系统如何实现" class="headerlink" title="监控系统如何实现"></a>监控系统如何实现</h2><ul><li>从需求上考虑，无必要搭建如ELK这样庞大的系统，有点杀鸡用牛刀的节奏。在一定应用群规模以内，可以把日志系统简单理解为一个能读写数据库的服务，加上其他辅助手段(定时任务、发消息套件)就能整合成一套可用、灵活、方便扩展的系统。</li><li>系统用前后分离的方式实现，罗列一下主要的技术。前端：vue、element-ui、echarts，服务端：nodejs7.6+<a href="http://koa.bootcss.com/#" target="_blank" rel="noopener">koa2</a>、db：mysql、orm: <a href="https://itbilu.com/nodejs/npm/VkYIaRPz-.html" target="_blank" rel="noopener">Sequelize</a>、nodejs守护进程：<a href="https://www.npmjs.com/package/pm2" target="_blank" rel="noopener">pm2</a></li><li>系统架构图： <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xpsli.com1.z0.glb.clouddn.com/feerror_share_pic2.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure></li><li>选择从零开始搭建一套系统，另一方面也是为了自己实践一下服务端开发领域上面的技术。有了上述方案以后，掌握一定服务端技术的人其实已经能知道具体采用什么技术手段、如何去实现。我自己在实现功能过程中，也有过很多考虑，也踩过一些坑。</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><ul><li>业务端的埋点捕获不多说了，在<a href="https://maizsss.github.io/2017/11/01/vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F/">这篇文章</a>有较为详细的说明，延伸到其他技术栈也是同样的思路。</li></ul><h3 id="管理端"><a href="#管理端" class="headerlink" title="管理端"></a>管理端</h3><ul><li>后台管理界面天然适合做成SPA，利用vue实现组件化开发，工作流上配合webpack进行一系列的工程化处理，可以十分快速地构建起一个前端应用。</li><li>UI框架上面，<a href="http://element-cn.eleme.io/1.4/#/zh-CN" target="_blank" rel="noopener">element-ui</a>在之前的一些后台系统上面有过实践，这次为了图方便也选用了同样的。element-ui由国内饿了么团队开源，有vue、react版本，vue版本相对支持力度大，目前已经更新到2.0版本，而项目中用到的是1.4.X版本，这个版本官方维护到这年12月份。element-ui的文档友好，在github的issue回应也及时，UI组件能满足大多数业务常用需求。属于国内基于vue的UI组件库中较领先的。</li><li>另外值得一提的是在基于react的UI库中，由阿里开源的<a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">ant-design</a>是个十分大而全的技术，UI设计上面也更简洁紧凑（提供了一套管理系统的设计规范），组件、功能更加丰富，提供一站式应用架构，可以短时间内就能把最小应用搭建起来。</li><li>在实现一些小规模的数据可视化需求中，国内<a href="http://echarts.baidu.com/examples.html" target="_blank" rel="noopener">echarts</a>的出现频率很高，较大规模的需求可能就要选择<a href="https://www.hcharts.cn/demo/highcharts" target="_blank" rel="noopener">highcharts</a>，毕竟后者起步早，背后团队力量大，文档还详细易懂。两者都是以全配置的方式驱动，每种常用的图表官方或社区都有对应的例子参考。但如果有特殊需求就要花点时间翻阅长溜溜的配置文档。在配置驱动这个点上延伸想象，可以编写数据过滤器来实现图表的复用，快速消化基本的<a href="http://datacenter.linghit.com/#/crowdPortrait" target="_blank" rel="noopener">数据可视化</a>需求。</li></ul><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ul><li>为了能让系统能在短时间内运行起来，加上自己在服务端开发上涉足还浅，服务端选择的技术相对保守。市面上有整套的服务端解决方案，如<a href="http://eggjs.org/zh-cn/tutorials/index.html" target="_blank" rel="noopener">eggjs</a>、<a href="https://thinkjs.org/doc/index.html" target="_blank" rel="noopener">thinkjs</a>，这类框架已经把service、日志、进程管理、定时任务、部署等都囊括了，最后并没有选用这些技术。npm庞大的生态，让我不需要担心功能的实现，每块领域都有优秀的npm包来解决。</li><li><a href="http://koa.bootcss.com/#" target="_blank" rel="noopener">Koa</a>的使用需要理解中间件与context（上下文）的概念，但其实express也一样，只是koa对express而言是承接的关系，koa是面向未来的web框架。<blockquote><p>Koa是一个轻量级的、极富表现力的http开发框架。<br>一个web request会通过Koa的中间件栈，来动态完成response的处理。<br>同时，Koa2采用了async和await的语法来增强中间件的表现力。<br>Koa本身做的工作仅仅是定制了中间件的编写规范，而不内置任何中间件。</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 伪代码，捕获路由间抛出的错误日志。</span><br><span class="line">async function logger(ctx, next) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        await next();</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">        //记录异常日志</span><br><span class="line">        console.error(moment().format(&apos;YYYY-MM-DD HH:mm:ss&apos;), &apos;, errorMsg:&apos;, JSON.stringify(formatLog(&#123;ctx, msg: error.toString()&#125;)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">router.all(</span><br><span class="line">    &apos;*&apos;,</span><br><span class="line">    logger</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>pm2会把应用内的console输出作为日志，以上代码简单利用了这点做了简单的日志服务，另外配合定时任务按天分割日志、清除N天前的日志文件。pm2作为node的进程管理包是主流选择，它支持负载均衡（node cluster），0秒重载等，还能支持配置启动。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">apps : [</span><br><span class="line">    &#123;</span><br><span class="line">      name      : &apos;linghit_fe&apos;,</span><br><span class="line">      script    : &apos;bin/www&apos;,</span><br><span class="line">      log_file  : &quot;./logs/pm2-log.log&quot;,</span><br><span class="line">      out_file  : &quot;./logs/pm2-out.log&quot;,</span><br><span class="line">      error_file : &quot;./logs/pm2-error.log&quot;,</span><br><span class="line">      pid_file: &quot;./logs/pm2-linghit_fe.pid&quot;,</span><br><span class="line">      merge_logs : true,</span><br><span class="line">      log_date_format : &quot;YYYY-MM-DD HH:mm:SS&quot;,</span><br><span class="line">      max_memory_restart: &quot;150M&quot;,</span><br><span class="line">      instances  : 2,</span><br><span class="line">      exec_mode  : &quot;cluster&quot;,</span><br><span class="line">      env: &#123;</span><br><span class="line">        COMMON_VARIABLE: &apos;true&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      env_production : &#123;</span><br><span class="line">        NODE_ENV: &apos;production&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      env_development : &#123;</span><br><span class="line">        NODE_ENV: &apos;development&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>pm2能以cluster的方式启动应用，充分发挥多核cpu的性能，本身是利用了node的cluster集群模块。在这个监控应用上，我开启了两个web进程（linghit_fe）,与其他的辅助进行，linghit_fe_logmaster用于管理日志，linghit_fe_task用于管理定时任务。再往深一点的主子进程控制，数据共享等还要继续学习深化。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xpsli.com1.z0.glb.clouddn.com/feerror_share_pic3.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure></li><li>Sequelize作为一个mysql的orm包，能简化大量的数据库操作，通过定义model与数据表建立映射关系，在这之后的数据库操作都是方便、可靠的。Sequelize基于Promise实现异步流程控制，也能与async await很好配合使用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const modelA = sequelize.define(&apos;modelName&apos;, &#123;</span><br><span class="line">    columnA: &#123;</span><br><span class="line">        type: Sequelize.BOOLEAN,</span><br><span class="line">        validate: &#123;</span><br><span class="line">          is: [&quot;[a-z]&quot;,&apos;i&apos;],        // will only allow letters</span><br><span class="line">          max: 23,                  // only allow values &lt;= 23</span><br><span class="line">          isIn: &#123;</span><br><span class="line">            args: [[&apos;en&apos;, &apos;zh&apos;]],</span><br><span class="line">            msg: &quot;Must be English or Chinese&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        field: &apos;column_a&apos;</span><br><span class="line">        // Other attributes here</span><br><span class="line">    &#125;,</span><br><span class="line">    columnB: Sequelize.STRING</span><br><span class="line">&#125;)</span><br><span class="line">sequelize.sync();</span><br><span class="line">await modelA.findAndCountAll(&#123;</span><br><span class="line">where: whereQuery,</span><br><span class="line">offset: per_page * (current - 1),</span><br><span class="line">limit: per_page,</span><br><span class="line">order: [[&apos;create_time&apos;, &apos;DESC&apos;]]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>报警机制，定时任务+方糖。<br><img src="http://7xpsli.com1.z0.glb.clouddn.com/feerror_share_pic4.png" alt="image"></li><li>路由管理。引用了koa-router包，<a href="https://www.npmjs.com/package/koa-router" target="_blank" rel="noopener">使用方式</a>。在这套代码里我设计成集中管理的模式，集中在一处能看到整个应用的路由关系，避免随着业务扩展而逻辑凌乱路由分散。具体看码。</li><li>使用loadtest进行简单的压力测试，目前能稳定在每秒100请求下。到了120以上开始内存上涨，延时增加，但服务还没崩。150以上开始出现极大延时，大量请求超时，吞吐量下降。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var loadtest = require(&apos;loadtest&apos;);</span><br><span class="line">var options = &#123;</span><br><span class="line">    url: url,</span><br><span class="line">    method: &apos;GET&apos;,</span><br><span class="line">    // maxRequests: 1000,</span><br><span class="line">    requestsPerSecond: 100,</span><br><span class="line">    concurrency: 20,</span><br><span class="line">    statusCallback: function (error, result, latency) &#123;</span><br><span class="line">    console.log(&apos;总请求量： %j,错误： %j，rps： %j，延时：%j ms &apos;, latency.totalRequests, latency.totalErrors, latency.rps, latency.meanLatencyMs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">loadtest.loadTest(options, function(error, result)</span><br><span class="line">&#123;</span><br><span class="line">    if (error)</span><br><span class="line">    &#123;</span><br><span class="line">        return console.error(&apos;Got an error: %s&apos;, error);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&apos;Tests run successfully&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="待扩展"><a href="#待扩展" class="headerlink" title="待扩展"></a>待扩展</h2><ul><li>统计数据的查询。根据传参判断，大于72小时的以小时为单位，其余以分钟为单位。查询语句上先以create_time（时间戳）用FROM_UNIXTIME格式化成对应的sqlFormat格式，在此基础上（date_format）分组查询做出统计。有没有更好的查询办法让统计粒度更自由？比如按10分钟，30分钟，天。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 定义时段分割，小于1小时的以分钟为分割单位</span><br><span class="line">let timeSplit = (countQuery.create_time.$lt - countQuery.create_time.$gt) &gt;= (72 * 60 * 60) ? &#123;</span><br><span class="line">unit: 60 * 60,</span><br><span class="line">sqlFormat: &apos;%Y-%m-%e %H:00&apos;,</span><br><span class="line">momentFormat: &apos;YYYY-MM-D HH:00&apos;</span><br><span class="line">&#125; : &#123;</span><br><span class="line">unit: 60,</span><br><span class="line">sqlFormat: &apos;%Y-%m-%e %H:%i&apos;,</span><br><span class="line">momentFormat: &apos;YYYY-MM-D HH:mm&apos;</span><br><span class="line">&#125;;</span><br><span class="line">// 查询</span><br><span class="line">let queryCount = await db[modelName].count(&#123;</span><br><span class="line">where: countQuery,</span><br><span class="line">order: [&apos;create_time&apos;, &apos;ASC&apos;],</span><br><span class="line">attributes: [</span><br><span class="line">[db.sequelize.fn(&apos;FROM_UNIXTIME&apos;, db.sequelize.col(&apos;create_time&apos;), timeSplit.sqlFormat), &apos;date_format&apos;]</span><br><span class="line">],</span><br><span class="line">group: &apos;date_format&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>用户模块、权限模块。在系统内部就可以管理不同项目接收报警信息的人，而不需要通过方糖扫码。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xpsli.com1.z0.glb.clouddn.com/feerror_share_pic5.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure></li><li>APM模块。页面性能分析，浏览器分布分析。</li><li>页面巡航模块。利用<a href="https://maizsss.github.io/2017/10/28/%E5%89%8D%E7%AB%AF%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/">UI自动化测试</a>定时跑测试脚本，监控各个页面的实际情况。</li><li>大数据量的解决方案？目前定时(1个月)清理db。</li><li>防刷、防攻击手段？？？</li><li>nginx实现的多机集群均衡负载？？？（单机都还要省着用，还多机?）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream XXX.XXX.com &#123;  </span><br><span class="line">    server 123.456.789.111:7082;  </span><br><span class="line">    server 123.456.789.222:7082;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>还有什么使用上面的优化？？</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端错误监控系统的搭建&quot;&gt;&lt;a href=&quot;#前端错误监控系统的搭建&quot; class=&quot;headerlink&quot; title=&quot;前端错误监控系统的搭建&quot;&gt;&lt;/a&gt;前端错误监控系统的搭建&lt;/h1&gt;&lt;h2 id=&quot;前端错误监控是什么&quot;&gt;&lt;a href=&quot;#前端错误监控是什
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue项目的错误捕获方式</title>
    <link href="http://maizsss.github.io/2017/11/01/vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F/"/>
    <id>http://maizsss.github.io/2017/11/01/vue项目的错误捕获方式/</id>
    <published>2017-11-01T04:16:28.000Z</published>
    <updated>2018-01-07T07:57:46.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要捕获错误？"><a href="#为什么要捕获错误？" class="headerlink" title="为什么要捕获错误？"></a>为什么要捕获错误？</h2><ul><li>为什么要花那么多的时间成本和精力去做什么捕获错误的事情？为什么要提高代码质量？为什么要让项目更健壮？这个问题我也不懂回答，不过这就好比”有得吃就行了，为什么要吃好，为什么要花大钱去吃什么米其林三星。”</li><li>目前为止我接触到的需要捕获错误的地方或目的有2：</li></ul><ol><li><p>做错误兼容，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">try &#123;</span><br><span class="line">    obj = JSON.parse(json);</span><br><span class="line">&#125; catch(e) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>做错误日志收集，帮助发现与定位问题。</p></li></ol><ul><li>已知的错误都在开发时处理掉了。需要捕获的是未知的错误：</li></ul><ol><li>未知的接口返回内容</li><li>未知的资源加载情况，如图片或其他媒体资源。</li><li>改了一处代码，没发现另一处被影响到的逻辑</li><li>较深层级的交互逻辑，没有在测试阶段被发现的问题</li></ol><h2 id="在MVVM时代，用window-onerror捕获错误已经不适用了"><a href="#在MVVM时代，用window-onerror捕获错误已经不适用了" class="headerlink" title="在MVVM时代，用window.onerror捕获错误已经不适用了"></a>在MVVM时代，用window.onerror捕获错误已经不适用了</h2><ul><li><p>通常MVVM项目会有一个（或多个）入口html or js，假如我在入口处如此监听全局错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      window.onerror = function (msg, script, line, columns, error) &#123;</span><br><span class="line">          console.log(msg);</span><br><span class="line">          console.log(script);</span><br><span class="line">          console.log(line);</span><br><span class="line">          console.log(columns);</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;http://XXX.XXX.XXX/static/js/app.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li><li><p>当入口js逻辑出现问题时,控制台出现报错信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xpsli.com1.z0.glb.clouddn.com/vue_catch_error1.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure></li><li><p>然而在onerror的错误捕获代码却输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(msg); //Script error.</span><br><span class="line">console.log(script); //&apos;&apos;</span><br><span class="line">console.log(line); //0</span><br><span class="line">console.log(columns); //0</span><br></pre></td></tr></table></figure></li><li><p>这是什么鬼？以下是网络上的一些搜索结果</p><blockquote><p>因为同源策略，Firefox, Chrome, Safari 等浏览器， 页面引用的非同域的外部脚本中抛出了异常，本页面无权限获得这个异常详情， 所以就成了 Script error.。</p></blockquote></li></ul><blockquote><p>解决办法有：1.静态文件服务器设置 Access-Control-Allow-Origin 头信息。2.script 标签添加 crossorigin 属性。</p></blockquote><ul><li>似乎一切就明朗了吗？就能早点回家吃饭了吗？<br>  图样图森破啊~<br>  就算最后能按方法解决掉script跨域脚本的问题。也无法确实可行地捕获到vue代码里的错误。webpack合并压缩混淆过的代码，输出的报错信息可读性也是有限的。另外，在vue组件内的错误其实是已经被捕获过，不会再抛给全局的onerror。<br>  vue是个先进的框架，它自己有便捷健全的错误监听机制。</li></ul><h2 id="捕获vue项目内全局错误"><a href="#捕获vue项目内全局错误" class="headerlink" title="捕获vue项目内全局错误"></a>捕获vue项目内全局错误</h2><ul><li><p>errorHandLer： <a href="https://cn.vuejs.org/v2/api/#errorHandler" target="_blank" rel="noopener">先读文档</a>。具体用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = function (err, vm, info) &#123;</span><br><span class="line">    let &#123; message, name, script, line, column, stack &#125; = err;</span><br><span class="line">    // 在vue提供的error对象中，script、line、column目前是空的。但这些信息其实在错误栈信息里可以看到。</span><br><span class="line">    script = !_.isUndefined(script) ? script : &apos;&apos;;</span><br><span class="line">    line = !_.isUndefined(line) ? line : 0;</span><br><span class="line">    column = !_.isUndefined(column) ? line : 0;</span><br><span class="line">    // 解析错误栈信息</span><br><span class="line">    let stackStr = stack ? stack.toString() : `$&#123;name&#125;:$&#123;message&#125;`;</span><br><span class="line">    </span><br><span class="line">    console.log(stackStr); </span><br><span class="line">    /*</span><br><span class="line">    ReferenceError: bbb is not defined</span><br><span class="line">    at a.created (shortLink.vue:361)</span><br><span class="line">    at It (vue.esm.js:2701)</span><br><span class="line">    at a.t._init (vue.esm.js:4293)</span><br><span class="line">    at new a (vue.esm.js:4463)</span><br><span class="line">    at ee (vue.esm.js:3740)</span><br><span class="line">    at init (vue.esm.js:3557)</span><br><span class="line">    at u (vue.esm.js:5212)</span><br><span class="line">    at l (vue.esm.js:5155)</span><br><span class="line">    at a.t.nodeOps [as __patch__] (vue.esm.js:5697)</span><br><span class="line">    at a.t._update (vue.esm.js:2460)</span><br><span class="line">    */</span><br><span class="line">    </span><br><span class="line">    // report code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误信息已经很足够了。如果有错误上报系统，开发者根据上报的错误信息回归到具体的案发现场，配合webpack的sourceMap也能快速定位问题。</p></li></ul><h2 id="捕获vue组件错误"><a href="#捕获vue组件错误" class="headerlink" title="捕获vue组件错误"></a>捕获vue组件错误</h2><ul><li>最近vue2.5发布，新增了一个errorCaptured钩子: <a href="https://cn.vuejs.org/v2/api/#errorCaptured" target="_blank" rel="noopener">先看文档</a></li><li>errorCaptured所为一个vue组件的钩子函数，能捕获到子孙组件的错误。在错误信息的显示上面与errorHandler是一致的，在做错误收集时无必要重复。但errorCaptured的目的我估计更加集中于去做即时性的兼容处理，这与try catch的性质是相似的，但vue提供了一个组件层面可用的try catch。</li></ul><h2 id="特殊位置埋点捕获"><a href="#特殊位置埋点捕获" class="headerlink" title="特殊位置埋点捕获"></a>特殊位置埋点捕获</h2><ul><li><p>比如说在收发请求时，有些问题并不会造成一个js的报错，然而前后端的交互也经常会因为协议上面的疏漏而造成问题。在项目中我用到了vue-resource这个http请求库。本身支持Promise API。那我可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.get(url).then((resp) =&gt; &#123;</span><br><span class="line">    if (返回数据不符合正确的格式) &#123;</span><br><span class="line">        throw `格式不正确`;</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof successFn === &apos;function&apos;) &#123;</span><br><span class="line">        successFn(resp.body); //在处理回调函数内部出错时，也会被捕获到错误</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, resp =&gt; &#123;</span><br><span class="line">    throw `网络问题的错误`;</span><br><span class="line">&#125;).catch((err) =&gt; &#123;</span><br><span class="line">    // 捕获到的错误信息会被包含在err对象里</span><br><span class="line">    // report code</span><br><span class="line">    /*</span><br><span class="line">        在收集错误信息时，可以选择性地把调用的url、method、query、response数据一并上报，方便还原案发现场。</span><br><span class="line">    */</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>是否便于埋点捕获还与项目的构成有关系，假如说项目里的请求都各走各路，那么处理逻辑就会很分散，开发者也会烦于维护。</p></li><li>出问题是无可避免的，问题的解决手段才是更重要，在问题大范围扩散前能发现问题，至少在代码上线后能淡定一点。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要捕获错误？&quot;&gt;&lt;a href=&quot;#为什么要捕获错误？&quot; class=&quot;headerlink&quot; title=&quot;为什么要捕获错误？&quot;&gt;&lt;/a&gt;为什么要捕获错误？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么要花那么多的时间成本和精力去做什么捕获错误的事情？为什么要提高代码
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端的UI自动化测试</title>
    <link href="http://maizsss.github.io/2017/10/28/%E5%89%8D%E7%AB%AF%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://maizsss.github.io/2017/10/28/前端的UI自动化测试/</id>
    <published>2017-10-28T07:14:09.000Z</published>
    <updated>2018-01-07T07:57:46.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><ul><li>单元测试：对构成程序的每个单元进行测试。工程上的一个共识是，如果程序的每个模块都是正确的、模块与模块的连接是正确的、那么程序基本上就会是正确的。以上是抄的，我也不懂。我的理解分两块，什么是单元？可以是函数、接口、组件、事务（what？）。什么是测试？就是验证功能，给予相同的输入（可以是数据、行为），会有相同的输出。</li><li>TDD（Test-Driven Development）：测试驱动开发。现写测试，后写业务，或者并行。对写测试的开发要求较高。</li><li>vue、react等组件化框架天生易于被测试，如<a href="https://github.com/ElemeFE/element/blob/dev/test/unit/specs/alert.spec.js" target="_blank" rel="noopener">element对alert组件测试的例子</a>。理论上项目中的vue、react等组件都可以写测试，但前提是组件封装优良，模块间松耦合，对代码编写规范有要求。</li><li>下面要吹的是一套针对与UI测试的套件。</li></ul><h2 id="1-相关工具"><a href="#1-相关工具" class="headerlink" title="1. 相关工具"></a>1. 相关工具</h2><ul><li>测试框架: Mocha（可以参考<a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">阮一峰的文章</a>）</li><li>断言库: Chai <a href="http://www.jianshu.com/p/f200a75a15d2" target="_blank" rel="noopener">详情看文章介绍</a></li><li>测试工具: nightmare(git:<a href="https://github.com/segmentio/nightmare)。这是一个基于electron的自动化框架，相比起PhantomJS的语法更加简单。" target="_blank" rel="noopener">https://github.com/segmentio/nightmare)。这是一个基于electron的自动化框架，相比起PhantomJS的语法更加简单。</a></li></ul><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><ul><li><p>全局安装mocha：npm install -g mocha</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Linux &amp; Mac</span><br><span class="line">$ env ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ </span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"># Windows</span><br><span class="line">$ set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>运行一个测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha ./testDemo/demo3.useChai.fn1.test.js</span><br></pre></td></tr></table></figure></li><li><p>运行一系列测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha ./testDemo</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-nightmare的使用"><a href="#3-nightmare的使用" class="headerlink" title="3. nightmare的使用"></a>3. nightmare的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>);</span><br><span class="line"><span class="keyword">const</span> nightmare = Nightmare(&#123;</span><br><span class="line">  show: <span class="literal">true</span>, <span class="comment">//是否显示浏览器窗口</span></span><br><span class="line">  width: <span class="number">1920</span>, <span class="comment">//浏览器窗口宽度</span></span><br><span class="line">height: <span class="number">1080</span> <span class="comment">//浏览器窗口高度</span></span><br><span class="line">&#125;);</span><br><span class="line">nightmare</span><br><span class="line">.goto(<span class="string">'http://www.linghit.com/'</span>) <span class="comment">//打开一个url</span></span><br><span class="line">.wait(<span class="string">'#generalize_content'</span>) <span class="comment">//等待某个元素出现在dom</span></span><br><span class="line">.wait(<span class="number">2000</span>) <span class="comment">//等待2000ms</span></span><br><span class="line">.click(<span class="string">'#closed'</span>) <span class="comment">//点击某个dom</span></span><br><span class="line">.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//在浏览器环境下的操作</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.location.href;</span><br><span class="line">&#125;)</span><br><span class="line">.end() <span class="comment">//结束一个nightmare队列</span></span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="comment">//获取到evaluate的return值</span></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="comment">//捕捉错误</span></span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-mocha结合nightmare进行测试"><a href="#4-mocha结合nightmare进行测试" class="headerlink" title="4. mocha结合nightmare进行测试"></a>4. mocha结合nightmare进行测试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</span><br><span class="line"><span class="keyword">const</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>);</span><br><span class="line"><span class="keyword">const</span> nightmare = Nightmare(&#123;</span><br><span class="line">  show: <span class="literal">true</span>,</span><br><span class="line">  width: <span class="number">1920</span>,</span><br><span class="line">height: <span class="number">1080</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'灵机官网'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 用例超时时长</span></span><br><span class="line">    <span class="keyword">this</span>.timeout(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">it(<span class="string">'页面是否能正常打开'</span>, (done) =&gt; &#123;</span><br><span class="line">nightmare</span><br><span class="line">.goto(<span class="string">'http://www.linghit.com/'</span>)</span><br><span class="line">.wait(<span class="string">'#generalize_content'</span>)</span><br><span class="line">.wait(<span class="number">1000</span>)</span><br><span class="line">.click(<span class="string">'#closed'</span>)</span><br><span class="line">.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> bannerLen = $(<span class="string">'.banner'</span>).length;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">bannerLen: bannerLen</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)</span><br><span class="line">.end()</span><br><span class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">expect(res.bannerLen).to.above(<span class="number">0</span>);</span><br><span class="line">done();</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">done(err);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-使用mochawesome生成测试报告"><a href="#5-使用mochawesome生成测试报告" class="headerlink" title="5. 使用mochawesome生成测试报告"></a>5. 使用mochawesome生成测试报告</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mocha .\testDemo\demo7.linghit.report.test.js --reporter mochawesome</span><br></pre></td></tr></table></figure><h2 id="6-其他东西"><a href="#6-其他东西" class="headerlink" title="6. 其他东西"></a>6. 其他东西</h2><ul><li><p>nightmare的截屏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.screenshot([path][, clip])</span><br></pre></td></tr></table></figure></li><li><p>mocha的钩子函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的所有测试用例之前执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的所有测试用例之后执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的每个测试用例之前执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在本区块的每个测试用例之后执行</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>通过node脚本定时巡航页面，并上报测试结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.js --&gt;</span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当然定时任务不会用setInterval。。。</span></span><br><span class="line">shell.exec(<span class="string">'mocha ./testDemo/demo8.other.test.js --reporter mochawesome'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( err ) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; <span class="keyword">else</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, <span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">&lt;!-- 测试脚本 --&gt;</span><br><span class="line">after(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 统一上报测试结果</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">method: <span class="string">'POST'</span>,</span><br><span class="line">    url: <span class="string">'http://localhost:3000/api/test/report'</span>,</span><br><span class="line">    body: reportObj, <span class="comment">//reportObj对象收集图片url，错误信息等等</span></span><br><span class="line">    json: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> request(options);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-背景&quot;&gt;&lt;a href=&quot;#0-背景&quot; class=&quot;headerlink&quot; title=&quot;0. 背景&quot;&gt;&lt;/a&gt;0. 背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单元测试：对构成程序的每个单元进行测试。工程上的一个共识是，如果程序的每个模块都是正确的、模块与模块的连接是
      
    
    </summary>
    
    
  </entry>
  
</feed>
