<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maizsss blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://maizsss.github.io/"/>
  <updated>2017-11-01T04:17:20.394Z</updated>
  <id>http://maizsss.github.io/</id>
  
  <author>
    <name>maizsss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue项目的错误捕获方式</title>
    <link href="http://maizsss.github.io/2017/11/01/vue%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7%E6%96%B9%E5%BC%8F/"/>
    <id>http://maizsss.github.io/2017/11/01/vue项目的错误捕获方式/</id>
    <published>2017-11-01T04:16:28.000Z</published>
    <updated>2017-11-01T04:17:20.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要捕获错误？"><a href="#为什么要捕获错误？" class="headerlink" title="为什么要捕获错误？"></a>为什么要捕获错误？</h2><ul><li>为什么要花那么多的时间成本和精力去做什么捕获错误的事情？为什么要提高代码质量？为什么要让项目更健壮？这个问题我也不懂回答，不过这就好比”有得吃就行了，为什么要吃好，为什么要花大钱去吃什么米其林三星。”</li><li>目前为止我接触到的需要捕获错误的地方或目的有2：</li></ul><ol><li><p>做错误兼容，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;&#125;;</div><div class="line">try &#123;</div><div class="line">    obj = JSON.parse(json);</div><div class="line">&#125; catch(e) &#123;&#125;</div></pre></td></tr></table></figure></li><li><p>做错误日志收集，帮助发现与定位问题。</p></li></ol><ul><li>已知的错误都在开发时处理掉了。需要捕获的是未知的错误：</li></ul><ol><li>未知的接口返回内容</li><li>未知的资源加载情况，如图片或其他媒体资源。</li><li>改了一处代码，没发现另一处被影响到的逻辑</li><li>较深层级的交互逻辑，没有在测试阶段被发现的问题</li></ol><h2 id="在MVVM时代，用window-onerror捕获错误已经不适用了"><a href="#在MVVM时代，用window-onerror捕获错误已经不适用了" class="headerlink" title="在MVVM时代，用window.onerror捕获错误已经不适用了"></a>在MVVM时代，用window.onerror捕获错误已经不适用了</h2><ul><li><p>通常MVVM项目会有一个（或多个）入口html or js，假如我在入口处如此监听全局错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;container&quot;&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">      &lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  </div><div class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">      window.onerror = function (msg, script, line, columns, error) &#123;</div><div class="line">          console.log(msg);</div><div class="line">          console.log(script);</div><div class="line">          console.log(line);</div><div class="line">          console.log(columns);</div><div class="line">      &#125;</div><div class="line">  &lt;/script&gt;</div><div class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;http://XXX.XXX.XXX/static/js/app.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></li><li><p>当入口js逻辑出现问题时,控制台出现报错信息</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://7xpsli.com1.z0.glb.clouddn.com/vue_catch_error1.png" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure></li><li><p>然而在onerror的错误捕获代码却输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(msg); //Script error.</div><div class="line">console.log(script); //&apos;&apos;</div><div class="line">console.log(line); //0</div><div class="line">console.log(columns); //0</div></pre></td></tr></table></figure></li><li><p>这是什么鬼？以下是网络上的一些搜索结果</p><blockquote><p>因为同源策略，Firefox, Chrome, Safari 等浏览器， 页面引用的非同域的外部脚本中抛出了异常，本页面无权限获得这个异常详情， 所以就成了 Script error.。</p></blockquote></li></ul><blockquote><p>解决办法有：1.静态文件服务器设置 Access-Control-Allow-Origin 头信息。2.script 标签添加 crossorigin 属性。</p></blockquote><ul><li>似乎一切就明朗了吗？就能早点回家吃饭了吗？<br>  图样图森破啊~<br>  就算最后能按方法解决掉script跨域脚本的问题。也无法确实可行地捕获到vue代码里的错误。webpack合并压缩混淆过的代码，输出的报错信息可读性也是有限的。另外，在vue组件内的错误其实是已经被捕获过，不会再抛给全局的onerror。<br>  vue是个先进的框架，它自己有便捷健全的错误监听机制。</li></ul><h2 id="捕获vue项目内全局错误"><a href="#捕获vue项目内全局错误" class="headerlink" title="捕获vue项目内全局错误"></a>捕获vue项目内全局错误</h2><ul><li><p>errorHandLer： <a href="https://cn.vuejs.org/v2/api/#errorHandler" target="_blank" rel="external">先读文档</a>。具体用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Vue.config.errorHandler = function (err, vm, info) &#123;</div><div class="line">    let &#123; message, name, script, line, column, stack &#125; = err;</div><div class="line">    // 在vue提供的error对象中，script、line、column目前是空的。但这些信息其实在错误栈信息里可以看到。</div><div class="line">    script = !_.isUndefined(script) ? script : &apos;&apos;;</div><div class="line">    line = !_.isUndefined(line) ? line : 0;</div><div class="line">    column = !_.isUndefined(column) ? line : 0;</div><div class="line">    // 解析错误栈信息</div><div class="line">    let stackStr = stack ? stack.toString() : `$&#123;name&#125;:$&#123;message&#125;`;</div><div class="line">    </div><div class="line">    console.log(stackStr); </div><div class="line">    /*</div><div class="line">    ReferenceError: bbb is not defined</div><div class="line">    at a.created (shortLink.vue:361)</div><div class="line">    at It (vue.esm.js:2701)</div><div class="line">    at a.t._init (vue.esm.js:4293)</div><div class="line">    at new a (vue.esm.js:4463)</div><div class="line">    at ee (vue.esm.js:3740)</div><div class="line">    at init (vue.esm.js:3557)</div><div class="line">    at u (vue.esm.js:5212)</div><div class="line">    at l (vue.esm.js:5155)</div><div class="line">    at a.t.nodeOps [as __patch__] (vue.esm.js:5697)</div><div class="line">    at a.t._update (vue.esm.js:2460)</div><div class="line">    */</div><div class="line">    </div><div class="line">    // report code</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>错误信息已经很足够了。如果有错误上报系统，开发者根据上报的错误信息回归到具体的案发现场，配合webpack的sourceMap也能快速定位问题。</p></li></ul><h2 id="捕获vue组件错误"><a href="#捕获vue组件错误" class="headerlink" title="捕获vue组件错误"></a>捕获vue组件错误</h2><ul><li>最近vue2.5发布，新增了一个errorCaptured钩子: <a href="https://cn.vuejs.org/v2/api/#errorCaptured" target="_blank" rel="external">先看文档</a></li><li>errorCaptured所为一个vue组件的钩子函数，能捕获到子孙组件的错误。在错误信息的显示上面与errorHandler是一致的，在做错误收集时无必要重复。但errorCaptured的目的我估计更加集中于去做即时性的兼容处理，这与try catch的性质是相似的，但vue提供了一个组件层面可用的try catch。</li></ul><h2 id="特殊位置埋点捕获"><a href="#特殊位置埋点捕获" class="headerlink" title="特殊位置埋点捕获"></a>特殊位置埋点捕获</h2><ul><li><p>比如说在收发请求时，有些问题并不会造成一个js的报错，然而前后端的交互也经常会因为协议上面的疏漏而造成问题。在项目中我用到了vue-resource这个http请求库。本身支持Promise API。那我可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Vue.http.get(url).then((resp) =&gt; &#123;</div><div class="line">    if (返回数据不符合正确的格式) &#123;</div><div class="line">        throw `格式不正确`;</div><div class="line">    &#125;</div><div class="line">    if (typeof successFn === &apos;function&apos;) &#123;</div><div class="line">        successFn(resp.body); //在处理回调函数内部出错时，也会被捕获到错误</div><div class="line">    &#125;</div><div class="line">&#125;, resp =&gt; &#123;</div><div class="line">    throw `网络问题的错误`;</div><div class="line">&#125;).catch((err) =&gt; &#123;</div><div class="line">    // 捕获到的错误信息会被包含在err对象里</div><div class="line">    // report code</div><div class="line">    /*</div><div class="line">        在收集错误信息时，可以选择性地把调用的url、method、query、response数据一并上报，方便还原案发现场。</div><div class="line">    */</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>是否便于埋点捕获还与项目的构成有关系，假如说项目里的请求都各走各路，那么处理逻辑就会很分散，开发者也会烦于维护。</p></li><li>出问题是无可避免的，问题的解决手段才是更重要，在问题大范围扩散前能发现问题，至少在代码上线后能淡定一点。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要捕获错误？&quot;&gt;&lt;a href=&quot;#为什么要捕获错误？&quot; class=&quot;headerlink&quot; title=&quot;为什么要捕获错误？&quot;&gt;&lt;/a&gt;为什么要捕获错误？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么要花那么多的时间成本和精力去做什么捕获错误的事情？为什么要提高代码
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端的UI自动化测试</title>
    <link href="http://maizsss.github.io/2017/10/28/%E5%89%8D%E7%AB%AF%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://maizsss.github.io/2017/10/28/前端的UI自动化测试/</id>
    <published>2017-10-28T07:14:09.000Z</published>
    <updated>2017-10-28T08:41:05.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h2><ul><li>单元测试：对构成程序的每个单元进行测试。工程上的一个共识是，如果程序的每个模块都是正确的、模块与模块的连接是正确的、那么程序基本上就会是正确的。以上是抄的，我也不懂。我的理解分两块，什么是单元？可以是函数、接口、组件、事务（what？）。什么是测试？就是验证功能，给予相同的输入（可以是数据、行为），会有相同的输出。</li><li>TDD（Test-Driven Development）：测试驱动开发。现写测试，后写业务，或者并行。对写测试的开发要求较高。</li><li>vue、react等组件化框架天生易于被测试，如<a href="https://github.com/ElemeFE/element/blob/dev/test/unit/specs/alert.spec.js" target="_blank" rel="external">element对alert组件测试的例子</a>。理论上项目中的vue、react等组件都可以写测试，但前提是组件封装优良，模块间松耦合，对代码编写规范有要求。</li><li>下面要吹的是一套针对与UI测试的套件。</li></ul><h2 id="1-相关工具"><a href="#1-相关工具" class="headerlink" title="1. 相关工具"></a>1. 相关工具</h2><ul><li>测试框架: Mocha（可以参考<a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="external">阮一峰的文章</a>）</li><li>断言库: Chai <a href="http://www.jianshu.com/p/f200a75a15d2" target="_blank" rel="external">详情看文章介绍</a></li><li>测试工具: nightmare(git:<a href="https://github.com/segmentio/nightmare)。这是一个基于electron的自动化框架，相比起PhantomJS的语法更加简单。" target="_blank" rel="external">https://github.com/segmentio/nightmare)。这是一个基于electron的自动化框架，相比起PhantomJS的语法更加简单。</a></li></ul><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><ul><li><p>全局安装mocha：npm install -g mocha</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># Linux &amp; Mac</div><div class="line">$ env ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ </div><div class="line">$ npm install</div><div class="line"></div><div class="line"># Windows</div><div class="line">$ set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/</div><div class="line">$ npm install</div></pre></td></tr></table></figure></li><li><p>运行一个测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha ./testDemo/demo3.useChai.fn1.test.js</div></pre></td></tr></table></figure></li><li><p>运行一系列测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha ./testDemo</div></pre></td></tr></table></figure></li></ul><h2 id="3-nightmare的使用"><a href="#3-nightmare的使用" class="headerlink" title="3. nightmare的使用"></a>3. nightmare的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>);</div><div class="line"><span class="keyword">const</span> nightmare = Nightmare(&#123;</div><div class="line">  show: <span class="literal">true</span>, <span class="comment">//是否显示浏览器窗口</span></div><div class="line">  width: <span class="number">1920</span>, <span class="comment">//浏览器窗口宽度</span></div><div class="line">height: <span class="number">1080</span> <span class="comment">//浏览器窗口高度</span></div><div class="line">&#125;);</div><div class="line">nightmare</div><div class="line">.goto(<span class="string">'http://www.linghit.com/'</span>) <span class="comment">//打开一个url</span></div><div class="line">.wait(<span class="string">'#generalize_content'</span>) <span class="comment">//等待某个元素出现在dom</span></div><div class="line">.wait(<span class="number">2000</span>) <span class="comment">//等待2000ms</span></div><div class="line">.click(<span class="string">'#closed'</span>) <span class="comment">//点击某个dom</span></div><div class="line">.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//在浏览器环境下的操作</span></div><div class="line"><span class="keyword">return</span> <span class="built_in">window</span>.location.href;</div><div class="line">&#125;)</div><div class="line">.end() <span class="comment">//结束一个nightmare队列</span></div><div class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; <span class="comment">//获取到evaluate的return值</span></div><div class="line"><span class="built_in">console</span>.log(res);</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="comment">//捕捉错误</span></div><div class="line"><span class="built_in">console</span>.log(err);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="4-mocha结合nightmare进行测试"><a href="#4-mocha结合nightmare进行测试" class="headerlink" title="4. mocha结合nightmare进行测试"></a>4. mocha结合nightmare进行测试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">const</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect;</div><div class="line"><span class="keyword">const</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>);</div><div class="line"><span class="keyword">const</span> nightmare = Nightmare(&#123;</div><div class="line">  show: <span class="literal">true</span>,</div><div class="line">  width: <span class="number">1920</span>,</div><div class="line">height: <span class="number">1080</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">describe(<span class="string">'灵机官网'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// 用例超时时长</span></div><div class="line">    <span class="keyword">this</span>.timeout(<span class="number">5</span> * <span class="number">1000</span>);</div><div class="line"></div><div class="line">it(<span class="string">'页面是否能正常打开'</span>, (done) =&gt; &#123;</div><div class="line">nightmare</div><div class="line">.goto(<span class="string">'http://www.linghit.com/'</span>)</div><div class="line">.wait(<span class="string">'#generalize_content'</span>)</div><div class="line">.wait(<span class="number">1000</span>)</div><div class="line">.click(<span class="string">'#closed'</span>)</div><div class="line">.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> bannerLen = $(<span class="string">'.banner'</span>).length;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">bannerLen: bannerLen</div><div class="line">&#125;;</div><div class="line">&#125;)</div><div class="line">.end()</div><div class="line">.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">expect(res.bannerLen).to.above(<span class="number">0</span>);</div><div class="line">done();</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</div><div class="line">done(err);</div><div class="line">&#125;)</div><div class="line">&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="5-使用mochawesome生成测试报告"><a href="#5-使用mochawesome生成测试报告" class="headerlink" title="5. 使用mochawesome生成测试报告"></a>5. 使用mochawesome生成测试报告</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha .\testDemo\demo7.linghit.report.test.js --reporter mochawesome</div></pre></td></tr></table></figure><h2 id="6-其他东西"><a href="#6-其他东西" class="headerlink" title="6. 其他东西"></a>6. 其他东西</h2><ul><li><p>nightmare的截屏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.screenshot([path][, clip])</div></pre></td></tr></table></figure></li><li><p>mocha的钩子函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 在本区块的所有测试用例之前执行</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 在本区块的所有测试用例之后执行</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 在本区块的每个测试用例之前执行</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">afterEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 在本区块的每个测试用例之后执行</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>通过node脚本定时巡航页面，并上报测试结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!-- index.js --&gt;</div><div class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 当然定时任务不会用setInterval。。。</span></div><div class="line">shell.exec(<span class="string">'mocha ./testDemo/demo8.other.test.js --reporter mochawesome'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>( err ) &#123;</div><div class="line"><span class="keyword">throw</span> err;</div><div class="line">&#125; <span class="keyword">else</span> </div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;, <span class="number">10</span> * <span class="number">1000</span>);</div><div class="line"></div><div class="line">&lt;!-- 测试脚本 --&gt;</div><div class="line">after(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// 统一上报测试结果</span></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">method: <span class="string">'POST'</span>,</div><div class="line">    url: <span class="string">'http://localhost:3000/api/test/report'</span>,</div><div class="line">    body: reportObj, <span class="comment">//reportObj对象收集图片url，错误信息等等</span></div><div class="line">    json: <span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">var</span> res = <span class="keyword">await</span> request(options);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-背景&quot;&gt;&lt;a href=&quot;#0-背景&quot; class=&quot;headerlink&quot; title=&quot;0. 背景&quot;&gt;&lt;/a&gt;0. 背景&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单元测试：对构成程序的每个单元进行测试。工程上的一个共识是，如果程序的每个模块都是正确的、模块与模块的连接是
      
    
    </summary>
    
    
  </entry>
  
</feed>
